#!/usr/bin/perl 
#use strict;
$|++;

# Author: Adam Moody <moody20@llnl.gov>
# based on: http://www.stonehenge.com/merlyn/UnixReview/col27.html
# from: Randal L. Schwartz

use Cwd;
use File::Find;

# Subroutine: Print usage ===========================================

sub print_usage
{
    print "\n";
    print "  ap -- prints final absolute path to file or directory after expanding all symlinks\n";
    print "\n";
    print "  Usage:  ap [-cdlrh] <file> [file2 ...]\n";
    print "\n";
    print "  Options:\n";
    print "    -c  Disable tty coloring\n";
    print "    -d  List permissions of each component in final absolute path\n";
    print "    -l  List all intermediate links\n";
    print "    -r  Recursively search named directories printing broken symlinks\n";
    print "    -h  Show this help screen\n";
    print "\n";
}

# Subroutine: Scans $PATH for file in $_[0] =========================

sub which
{
  my $file = $_[0];
  return "" if ($file =~ m#/#); # don't search through path if file contains slashes
  my @paths = split ":", $ENV{PATH};
  foreach my $path (@paths)
  { if (-e "$path/$file") { return "$path/$file"; } }
  return "";
}

# Process arguments =================================================

# Initial values
$flag_l = 0;
$flag_d = 0;
$flag_c = 0;
$flag_r = 0;

# Process options
if(@ARGV and $ARGV[0] =~ /^-/)
{
  # Flag will be set on any invalid option
  my $op_invalid = 0;

  # Strip off and record each option
  while(@ARGV and $ARGV[0] =~ /^-/)
  {
    my $op = shift @ARGV;
    my $op_valid=0;
    if($op =~ /^-.*l.*/) {$flag_l = 1; $op_valid = 1;}
    if($op =~ /^-.*d.*/) {$flag_d = 1; $op_valid = 1;}
    if($op =~ /^-.*c.*/) {$flag_c = 1; $op_valid = 1;}
    if($op =~ /^-.*r.*/) {$flag_r = 1; $op_valid = 1;}
    if(not $op_valid) {$op_invalid = 1;}
  }

  # Print usage and exit on any invalid option
  if($op_invalid) {print_usage(); exit;}
}

#www.linuxjournal.com/article/8603 (color coding on screen)
my $c_cyan = "[0;36m";
my $c_red  = "[1;37;41m";
my $c_end  = "[0m";
if ($flag_c) # turn off color coding
{
  $c_cyan = "";
  $c_red  = "";
  $c_end  = "";

}

# Trace down absolute path for target(s) ============================

# print usage if no arguments are given
if (@ARGV < 1 and not $flag_r) {print_usage(); exit;}

@params = ();
if (not $flag_r) {
  @params = @ARGV;
} else {
  # with flag_r, items on the command line are directories
  # do a recursive search for broken links in these directories
  sub wanted { if ( -l && ! -e) { push @params, $File::Find::name; } }
  if (@ARGV == 0) { push @ARGV, '.'; }
  foreach $dir (@ARGV)
  {
    chomp $dir;
    find(\&wanted, $dir);
  }
}

my $err = 0;

while (@params)
{
  my $file = shift @params;
  
  # Get initial path to file =======
  # check that the file exists, according to following order:
  #  1) user named file exactly
  #  2) file exists in the current working directory
  #  3) file is an executable in $PATH
  # Bail out and move on to next file, if not found
  if (not ($file =~ m#^/#))
  {
    my $file_cwd = join "/", cwd, $file;
    #my $file_exe = `which $file 2>/dev/null`;
    my $file_exe = which($file);
    chomp $file_exe;
    if    (-e $file_cwd or -l $file_cwd) { $file = $file_cwd; }
    elsif (-e $file_exe or -l $file_exe) { $file = $file_exe; }
    else { print "File not found: $c_red$file$c_end\n"; $err = 1; next; }
    #print "DBG: $file_cwd\t$file_exe\t$file\n";
  }

  # Traverse links to file =========
  my @right = split "/", $file;
  my @left  = shift @right;  # should be leading empty string, since $file is fully qualified

  my @links = ();
  while (@right)
  {
    $item = shift @right;
    next if $item eq "." or $item eq "";

    if ($item eq "..")
    {
      pop @left if @left > 1;
      next;
    }

    my $link = readlink (join "/", @left, $item);

    if (defined $link) {
      my $file = join "/", @left, $item, @right;
      push @links, $file;
      $file = join "/", @left, $item;

      my @parts = split "/", $link;
      if (@parts && ($parts[0] eq "")) { @left = shift @parts; }  # absolute path
      unshift @right, @parts; # pushes parts onto front of @right list

      my $target = join "/", @left, @right;
      if (-e $target or -l $target)
        { push @links, "$c_cyan$file$c_end --> $link\n"; }
      else
        { push @links, "$c_red$file$c_end --> $c_red$link$c_end\n"; $err = 1; push @left, @right; last; }

      next;
    } else {
      push @left, $item;
      next;
    }
  } # end while(@right)

  # Output =========================
  # print intermediate links
  if ($flag_l)
  {
    if (@links)
    {
      my $dirlist = join("\n", @links);
      print "\n", $dirlist;
    }
    my $ap = join "/", @left;
    if (not -e $ap) { print "\nFile not found: $c_red$ap$c_end\n"; $err = 1; }
    else            { print "\n$ap\n"; }
  }

  # print permissions for each component of absolute path to file
  if ($flag_d)
  {
    @right = ();
    my @dirs = ();
    my $baddir = "";
    while (@left)
    {
      # pull the front directory component from @left and push it on the end of @right
      push @right, shift @left;
      next if (@right == 1 and $right[0] eq ""); #skip leading empty string
      my $dir = join "/", @right;
      if (-e $dir) { push @dirs, $dir; }
      else { $baddir = $dir; last; }
    }
    my $dirlist = join(" ", @dirs);
    print "\n", `ls -ld / $dirlist`;
    if ($baddir) { print "File not found: $c_red$baddir$c_end\n"; $err = 1; }
  }

  if ($flag_l or $flag_d) {
    if (not @params) { print "\n"; }
  } else {
    # print absolute path to file
    my $ap = join "/", @left;
    if ($flag_r)    { print $links[0], "\n"; }
    if (not -e $ap) { print "File not found: $c_red$ap$c_end\n"; $err = 1; }
    else            { print "$ap\n"; }
  }
}

exit $err;
