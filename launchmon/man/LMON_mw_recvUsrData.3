.TH LaunchMON 3 "December 2012" LaunchMON "LaunchMON Middleware API"

.SH NAME
LMON_mw_recvUsrData LMON_mw_regPackForMwToFe LMON_mw_regUnpackForFeToMw LMON_mw_sendUsrData \- LaunchMON middleware API: client tool data transfer functions.  

.SH SYNOPSIS
.nf
.B #include <lmon_mw.h>
.PP
.BI "lmon_rc_e LMON_mw_regPackForMwToFe ( "
.BI "  int (* " packMwfe " ) (void * " udata ", void * " msgbuf ", int " msgbufmax ", int * " msgbuflen "));"
.PP
.BI "lmon_rc_e LMON_mw_regUnpackForFeToMw ( "
.BI "  int (* " unpackFemw " ) (void * " udatabuf ", int " udatabuflen ", void * " udata "));"
.PP
.BI "lmon_rc_e LMON_mw_sendUsrData ( void * " udata " );"
.PP
.BI "lmon_rc_e LMON_mw_recvUsrData ( void * " udata " );"
.PP
.B cc ... -lmonmwapi

.SH DESCRIPTION
\fBLMON_mw_regPackForMwToFe()\fR allows the master middleware daemon
to register a pack function
(\fIpackMwfe\fR) that is used in serializing the user-provided data, \fIudata\fR,
into \fImsgbuf\fR. This callback function is used either during
the front-end<->middleware handshake operations (see \fBLMON_mw_ready\fR(3))
or an explicit user data transfer request via the \fBLMON_mw_sendUsrData()\fR
function. 
\fIudata\fR is a pointer to which tool data begins. \fIpackMwfe\fR must
serialize this input data into the \fImsgbuf\fR argument whose buffer
size is specified by the \fImsgbufmax\fR argument. The packed data
cannot exceed \fImsgbufmax.\fR The current default max is determined by
the \fBLMON_MAX_USRPAYLOAD\fR macro defined in \fBlmon_api_std.h\fR, which is
set to a relatively small value, but can be configured differently.
The \fIpackMwfe\fR function must return the size of the filled buffer
via the \fImsgbuflen\fR argument. In addition, any negative value 
returned from the \fIpackMwfe\fR function is considered to be an error condition.
.PP
\fBLMON_mw_regUnpackForFeToMw()\fR allows the master middleware daemon to register
an unpack (\fIunpackFemw\fR) function that de-serializes the tool data received from the front-end
into \fIudata\fR.
This callback function is used either during
the front-end<->middleware handshake operations (see \fBLMON_mw_handshake\fR(3))
or an explicit user data transfer request via the \fBLMON_mw_recvUsrData()\fR
function.
\fIudatabuf\fR is the raw payload received from the front-end.
\fIudatabuflen\fR is the length of that raw buffer, and
\fIudata\fR is the pointer to which this buffer should be unpacked.
Any negative value returned from the \fIunpackFemw\fR function 
is considered to be an error condition.
.PP
\fBLMON_mw_sendUsrData()\fR sends a message containing
the tool data (\fIudata\fR) to the front-end.
If the correspoding pack function has been registered, this
function calls back that pack function to serialize \fIudata\fR
into the message.
If \fIudata\fR is NULL, this function sends an empty message
that contains only the message header to the front-end,
and returns the \fBLMON_ENOPLD\fR code.
.PP
\fBLMON_mw_recvUsrData()\fR receives a message containing
the client tool data (\fIudata\fR) from the master middleware daemon.
If the correspoding unpack function has been registered, this
function calls back that unpack function to de-serialize the
user payload into \fIudata\fR.
When the received message contains no user payload, this function
return \fBLMON_ENOPLD\fR.

The above functions require all of the middleware daemons to
participate, but \fIudata\fR is only meaningful to the master
daemon.


.SH RETURN VALUE
These functions return \fBLMON_OK\fR
on success; otherwise, an LMON error code is returned 
as described below. 

.SH ERRORS
.TP
.B LMON_OK
Success.
.TP
.B LMON_EBDARG
Invalid arguments.
.TP
.B LMON_ENOPLD
The message contains no user payload.
.TP
.B LMON_ENCLLB
No pack or unpack function is registered.
.TP 
.B LMON_ENEGCB
The pack or unpack function returned a negative value.
.TP
.B LMON_ENOMEM
Out of memory.
.TP
.B LMON_EINVAL:
Encountered other error conditions

.SH AUTHOR
Dong H. Ahn <ahn1@llnl.gov>

.SH "SEE ALSO"
.BR LMON_fe_init(3),
.BR LMON_fe_createSession(3),
.BR LMON_fe_attachAndSpawnDaemons(3),
.BR LMON_fe_launchAndSpawnDaemons(3),
.BR LMON_fe_kill(3),
.BR LMON_fe_detach(3),
.BR LMON_fe_shutdownDaemons(3),
.BR LMON_fe_regUnpackForBeToFe(3),
.BR LMON_fe_regPackForFeToBe(3),
.BR LMON_fe_putToBeDaemonEnv(3),
.BR LMON_fe_sendUsrDataBe(3),
.BR LMON_fe_recvUsrDataBe(3),
.BR LMON_fe_getProctable(3),
.BR LMON_fe_getProctableSize(3),
.BR LMON_fe_getResourceHandle(3),
.BR LMON_fe_regErrorCB(3),
.BR LMON_fe_regStatusCB(3),
.BR LMON_fe_getRMInfo(3),
.BR LMON_be_init(3),
.BR LMON_be_finalize(3),
.BR LMON_be_getMyRank(3),
.BR LMON_be_getSize(3),
.BR LMON_be_amIMaster(3),
.BR LMON_be_handshake(3),
.BR LMON_be_ready(3),
.BR LMON_be_barrier(3),
.BR LMON_be_broadcast(3),
.BR LMON_be_gather(3),
.BR LMON_be_scatter(3),
.BR LMON_be_getMyProctab(3),
.BR LMON_be_getMyProctabSize(3)
