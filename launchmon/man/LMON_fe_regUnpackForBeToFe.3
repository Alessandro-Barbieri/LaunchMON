.TH LaunchMON 3 "FEBRUARY 2008" LaunchMON "LaunchMON Front-End API"

.SH NAME
LMON_fe_regPackForFeToBe, LMON_fe_regUnpackForBeToFe, LMON_fe_putToBeDaemonEnv, LMON_fe_recvUsrDataBe, LMON_fe_sendUsrData \- LaunchMON front-end API: client tool data transfer functions. 
.PP 

.SH SYNOPSIS
.nf
.B #include <lmon_fe.h>
.PP
.BI "lmon_rc_e LMON_fe_regPackForFeToBe ( int " sessionHandle ", "
.BI "  int (* " packFebe " ) (void * " udata ", void * " msgbuf ", int " msgbufmax ", int * " msgbuflen "));"
.PP
.BI "lmon_rc_e LMON_fe_regUnpackForBeToFe ( int " sessionHandle ", " 
.BI "  int (* " unpackBefe " ) (void * " udatabuf ", int " udatabuflen ", void * " udata "));"
.PP
.BI "lmon_rc_e LMON_fe_putToBeDaemonEnv (int " sessionHandle ", "
.BI "  lmon_daemon_env_t * " dmonEnv ", int " numElem " );"  
.PP
.BI "lmon_rc_e LMON_fe_sendUsrDataBe ( int " sessionHandle ", "
.BI "  void * " febe_data " );"  
.PP
.BI "lmon_rc_e LMON_fe_recvUsrDataBe ( int " sessionHandle ", "
.BI "  void * " befe_data " );"  
.PP
.B cc ... -lmonfeapi
.fi

.SH DESCRIPTION
\fBLMON_fe_regPackForFeToBe()\fR registers a per-session pack function 
(\fIpackFebe\fR) that serializes the user-provided data, \fIudata\fR,
into \fImsgbuf\fR.
The registration is valid and effective  
only if it occurs before a successful \fBLMON_fe_attachAndSpawnDaemons()\fR 
or \fBLMON_fe_launchAndSpawnDaemons()\fR call, and \fIsessionHandle\fR 
contains a valid session ID. \fIpackFebe\fR is called as part of the 
(front-end <-> master back-end daemon) handshaking performed only within 
above two functions.
\fIudata\fR is a pointer to which tool data begins. \fIpackFebe\fR must 
serialize this input data into the \fImsgbuf\fR argument whose buffer 
size is specified by the \fImsgbufmax\fR argument. The packed data 
cannot exceed \fImsgbufmax.\fR The current default max is determined by 
the \fBLMON_MAX_USRPAYLOAD\fR macro defined in \fBlmon_api_std.h\fR, which is 
set to a relatively small value, but can be differently configured. 
The \fIpackFebe\fR function must return the size of the filled buffer 
via \fImsgbuflen\fR 
In addition, any negative value
returned from the \fIpackFebe\fR function is considered to be an error condition.
.PP
\fBLMON_fe_regUnpackForBeToFe()\fR registers a per-session unpack function 
that de-serializes the tool data received from the master back-end daemon. 
The registration is valid only when it occurs before a successful
\fBLMON_fe_attachAndSpawnDaemons()\fR or \fBLMON_fe_launchAndSpawnDaemons()\fR call, 
and \fIsessionHandle\fR contains a valid ID; returns an error code otherwise. 
\fIunpackBefe\fR is called as part of the (front-end <-> master back-end daemon)
handshaking operations, when the front-end receives the master back-end 
daemon's data. \fIunpackBefe\fR must unpack the back-end provided tool data, 
and de-serialize it into the \fIudata\fR argument. 
\fIudatabuf\fR is the raw payload received from the master back-end daemon.
\fIudatabuflen\fR is the length of that raw buffer.
And \fIudata\fR is the pointer to which this buffer should be unpacked. 
Any negative value returned from the \fIunpackBefe\fR function
is considered to be an error condition.
.PP
\fBLMON_fe_putToBeDaemonEnv()\fR adds \fIdmonEnv\fR to the environment variable
list that gets propagated to all the backend daemons associated with \fIsessionHandle\fR. 
The registration is valid only when it occurs before a \fBLMON_fe_attachAndSpawnDaemons()\fR 
or \fBLMON_fe_launchAndSpawnDaemons()\fR call, and \fIsessionHandle\fR is a valid ID; 
returns \fBLMON_EINVAL\fR otherwise. The \fInumElem\fR argument specifies the number 
of elements in the \fIdmonEnv\fR array.
.PP
\fBLMON_fe_sendUsrDataBe()\fR sends a message containing 
the tool data (\fIfebe_data\fR) to the master back-end daemon. 
If the correspoding pack function has been registered, this
function calls back that pack function to serialize \fIfebe_data\fR
into the message.
If \fIfebe_data\fR is NULL, this function sends an empty message 
that contains only the message header to the master back-end daemon,
and returns the \fBLMON_ENOPLD\fR code.
.PP
\fBLMON_fe_recvUsrDataBe()\fR receives a message containing 
the user data (\fIbefe_data\fR) from the master back-end daemon. 
If the correspoding unpack function has been registered, this
function calls back that unpack function to de-serialize the 
user payload into \fIbefe_data\fR.
When the received message contains no payload, this function
return \fBLMON_ENOPLD\fR. 

.SH RETURN VALUE
These functions return \fBLMON_OK\fR on success; otherwise, an LMON error code 
is returned. 

.SH ERRORS
.TP
.B LMON_OK
Success.
.TP
.B LMON_EBDARG
Invalid arguments.
.TP
.B LMON_ENOPLD
The message contains no user payload.
.TP
.B LMON_ENCLLB
No pack or unpack function is registered.
.TP 
.B LMON_ENEGCB
The pack or unpack function returned a negative value.
.TP
.B LMON_ENOMEM
Out of memory. 
.TP
.B LMON_EINVAL:
Encountered other error conditions 

.SH AUTHOR
Dong H. Ahn <ahn1@llnl.gov>

.SH "SEE ALSO"
.BR LMON_fe_init(3),
.BR LMON_fe_createSession(3),
.BR LMON_fe_attachAndSpawnDaemons(3),
.BR LMON_fe_launchAndSpawnDaemons(3),
.BR LMON_fe_kill(3),
.BR LMON_fe_detach(3),
.BR LMON_fe_shutdownDaemons(3),
.BR LMON_fe_getProctable(3),
.BR LMON_fe_getProctableSize(3),
.BR LMON_fe_getResourceHandle(3),
.BR LMON_fe_regErrorCB(3),
.BR LMON_fe_regStatusCB(3),
.BR LMON_fe_getRMInfo(3),
.BR LMON_be_init(3),
.BR LMON_be_finalize(3),
.BR LMON_be_getMyRank(3),
.BR LMON_be_getSize(3),
.BR LMON_be_amIMaster(3),
.BR LMON_be_handshake(3),
.BR LMON_be_ready(3),
.BR LMON_be_barrier(3),
.BR LMON_be_broadcast(3),
.BR LMON_be_gather(3),
.BR LMON_be_scatter(3),
.BR LMON_be_regPackForBeToFe(3),
.BR LMON_be_regUnpackForFeToBe(3),
.BR LMON_be_recvUsrData(3),
.BR LMON_be_sendUsrData(3),
.BR LMON_be_getMyProctab(3),
.BR LMON_be_getMyProctabSize(3)
